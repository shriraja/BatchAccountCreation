AWSTemplateFormatVersion: '2010-09-09'
Description: Control Tower Batch Account Creation
Parameters:
  URLForInputCSVFile:
    Default: 'https://vinjak-ctohio-outbox.s3.us-east-2.amazonaws.com/sample.csv'
    Description: URL for Batch Account Creation CSV file.
    NoEcho: 'false'
    Type: String
  S3BucketName:
    Default: 'vinjak-ctohio-outbox'
    Description: S3 Bucket - Location of lambda .zip files
    Type: 'String'

Resources:
  NewAccountDetailsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: AccountName
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: AccountName
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  NewAccountHandlerLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  NewAccountHandlerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:Query
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - NewAccountDetailsTable
                  - Arn
              - Ref: AWS::NoValue
        Version: "2012-10-17"
      PolicyName: NewAccountHandlerPolicy
      Roles:
        - Ref: NewAccountHandlerLambdaExecutionRole
  NewAccountHandlerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: ct_batchcreation_lambda.zip
      Handler: NewAccountHandler.account_handler
      Role:
        Fn::GetAtt:
          - NewAccountHandlerLambdaExecutionRole
          - Arn
      Runtime: python3.7
      Environment:
        Variables:
          TABLE_NAME:
            Ref: NewAccountDetailsTable
          BATCH_ACCT_INPUT:
            Ref: URLForInputCSVFile
      Timeout: 300
    DependsOn:
      - NewAccountHandlerPolicy
      - NewAccountHandlerLambdaExecutionRole
  NewAccountHandlerTriggerLambda:
    Type: 'Custom::AccountHandler'
    DependsOn:
      - NewAccountHandlerLambdaFunction
    Properties:
      ServiceToken: !GetAtt
        - NewAccountHandlerLambdaFunction
        - Arn

  TargetLamdbaForCreateManagedAccount:
    DependsOn:
    - CreateManagedAccountLambdaRole
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: ct_account_create_lambda.zip
      Handler: account_create.lambda_handler
      MemorySize: 128
      Role: !GetAtt "CreateManagedAccountLambdaRole.Arn"
      Runtime: python3.7
      Timeout: 60
      Environment:
        Variables:
          TABLE_NAME:
            Ref: NewAccountDetailsTable
          PRINCIPAL_ARN:
            !GetAtt "CreateManagedAccountLambdaRole.Arn"

  TargetLambdaTrigger:
    Type: 'Custom::AccountHandler'
    DependsOn:
      - TargetLamdbaForCreateManagedAccount
      - NewAccountHandlerTriggerLambda
    Properties:
      ServiceToken: !GetAtt
        - TargetLamdbaForCreateManagedAccount
        - Arn

  PermissionForEventsToInvokeLambdachk:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "TargetLamdbaForCreateManagedAccount.Arn"
      Principal: events.amazonaws.com
      SourceArn: !GetAtt "CaptureControlTowerLifeCycleEvents.Arn"

  CreateManagedAccountLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition: {}
      Path: /
      Policies:
        - PolicyName: inline-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudformation:CreateStackInstances'
                Resource: !Join [':',['arn:aws:cloudformation', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'stackset/*:*']]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AdministratorAccess 

  CaptureControlTowerLifeCycleEvents:
    DependsOn:
    - TargetLamdbaForCreateManagedAccount
    Type: AWS::Events::Rule
    Properties:
      Description: Capture Control Tower LifeCycle Events and Trigger an Action
      EventPattern:
        detail:
          eventName:
          - CreateManagedAccount
          eventSource:
          - controltower.amazonaws.com
        detail-type:
        - AWS Service Event via CloudTrail
        source:
        - aws.controltower
      State: ENABLED
      Targets:
      - Arn: !GetAtt "TargetLamdbaForCreateManagedAccount.Arn"
        Id: IDCaptureControlTowerLifeCycleEvents

